# Use a lightweight Node.js base image
FROM node:22-alpine

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to leverage Docker's caching
# This ensures npm install is only run if dependencies change
COPY frontend/package*.json ./
RUN npm cache clean --force \
  && rm -rf node_modules \
  && npm install --legacy-peer-deps \
  # Rebuild esbuild binary to match container architecture
  && npm uninstall esbuild \
  && npm install esbuild \
  && npm rebuild esbuild

# debug version
CMD node -p "require('esbuild').version"

# Copy the rest of the application source code
COPY frontend .

# Expose the port your Node.js application listens on
EXPOSE 3000

# Define the command to run your application when the container starts
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "3000"]
